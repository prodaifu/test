# 配置姓名和邮箱
	git config --global user.name "Your Name"
	git config --global user.email "email@example.com"
# 仓库的初始化命令
	git init
# 添加文件
	# 1. 文件添加到暂存区
		git add <文件名>	
		# git add .  (添加当前路径所有文件)
	# 2. 暂存区的内容添加到当前分支
		git commit -m "提交说明"
# 查看仓库当前的状态 查看是否有修改过
	git status
	# 查看修改了什么
	git diff <文件名>

# 把本地仓库的内容推送到GitHub仓库
	# 本地仓库与远程仓库关联
		# git remote add origin https://github.com/prodaifu/test.git(使用https需重复验证密码)
		git remote add origin git@github.com:prodaifu/test.git
	# 第一次推送
		git push -u origin master
	# 之后的推送简化命令
		git push origin master

# 远程库有更新,需先拉取远程代码库到本地
	git pull origin master

# git修改本地仓库与远程仓库的连接
	# 删除再添加
		git remote rm origin
		git remote add origin git@github.com:prodaifu/test.git
	# 直接修改
		git remote origin  set-url git@github.com:prodaifu/test.git
# 从远程仓库克隆
	git clone git@github.com:prodaifu/test.git

# 使用码云推送
	git push --set-upstream origin master
	
# 版本回退
	# 查看版本记录
		$ git log
		# $ git log --pretty=oneline
	# 选择版本
		$ git reset --hard commit_id
		$ git reset --hard HEAD^
		# 上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
	# Git提供了一个命令git reflog用来记录你的每一次命令：
		$ git reflog
	
	# 现在总结一下：
		# 1. HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
		# 2. 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
		# 3. 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
# 文件管理_修改
	# 用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
	$ git diff head -- readme.txt
	# 第一次修改 -> git add -> 第二次修改 -> git add -> git commit
# 撤销
	# 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	# 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
	# 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
# 删除
	# $ rm test.txt
	$ git rm test.txt
	# 使用git rm <file>和删除文件后再git add<file>效果是一样的。